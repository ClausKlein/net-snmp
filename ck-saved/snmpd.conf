# date: 2013-01-25 (ck)

#FIXME oldEngineID 0x80001f88017f000001
#mac engineIDType 3
# use ip addr
## engineIDType 1
# use eth0 interface
## engineIDNic 2

## agentaddress udp6:[::1]:161,udp::161
agentaddress tcp6:161,udp6:161,udp:161
# --agentaddress=udp6:161,udp:161

########################
# enable agentx via tcp:
########################
master agentx
# agentxsocket             AgentX bind address
##TODO agentxsocket tcp:127.0.0.1:705
# agentXSocket [<transport-specifier>:]<transport-address>[,...]

agentXTimeout 5s
# agentxTimeout            AgentX Timeout (seconds)
# defines the timeout period (NUM seconds) for an AgentX request.  Default is 1 second.
agentXRetries 0
# agentxRetries            AgentX Retries
# defines the number of retries for an AgentX request.  Default is 5 retries.

#===========================================================================================
# create a view with access to all MIBs; Needed to be able to configure context restrictions
# view VNAME TYPE OID [MASK]
#===========================================================================================
view iso included .iso
view system included .system

########################
# create snmp v3 users
########################
## createUser netadmin MD5 "mypassword" DES "mypassword"
## rwuser netadmin authPriv -V iso ""

#FIXME createUser trapuser MD5 "--none--" DES "--none--"
#FIXME rouser trapuser noAuthNoPriv -V iso *

createUser unsec MD5 "--none--" DES "--none--"
rwuser unsec noAuthNoPriv -V iso *
# If no context field is given, then we default to matching all contexts (for
# compatability with previous releases).  But if a field context is specified
# (not ending with '*') then this should be taken as an exact match.
# Specifying a context field of "" will match the default context (and *only*
# the default context).

########################
# create snmp v2c communities
# r{o,w}community[6] COMMUNITY [SOURCE [OID | -V VIEW [CONTEXT]]]
########################
### rocommunity public localhost -V system *
### rocommunity private localhost -V iso

# authcommunity     TYPES   COMMUNITY   [SOURCE [OID | -V VIEW [CONTEXT]]]
#   is an alternative to the rocommunity/rwcommunity directives.  TYPES will
#   usually  be  read  or read,write  respectively.  The view specification can
#   either be an OID subtree (as before), or a named view (defined using the view
#   directive) for greater flexibility.  If this is  omitted, then  access will be
#   allowed to the full OID tree.  If CONTEXT is specified, access is configured
#   within this SNMPv3 context.  Otherwise the default context ("") is used.
# needs patched vacm_conf.c: vacm_parse_authtokens()!
# authcommunity authtype1,authtype2 community [default|hostname|network/bits [oid|-V view [CONTEXT]]]
authcommunity read        public   default -V system
authcommunity read,write  private  default -V iso  # all at default context
authcommunity read,write  wfa1     default -V iso wfa1
authcommunity read,write  wfa2     default -V iso wfa2
authcommunity read,write  wfa3     default -V iso wfa3
authcommunity read,write snmptrapd default -V iso snmptrapd

########################
# Notification Handling:
########################
#XXX authtrapenable 1
##default  doNotRetainNotificationLogs no

### trapsess -v 2c -c private  udp6:traptarget:162
## trapsess -v 2c -c public  udp:localhost:162

# This is the appropriate directive for defining SNMPv3 trap receivers. See
# http://www.net-snmp.org/tutorial/tutorial-5/commands/snmptrap-v3.html for
# more information about SNMPv3 notification behaviour.
### trapsess -v 3 -e 0x80001f88017f000001 -D usm -u trapadmin -a MD5 -A mypassword -x DES -X mypassword -l authPriv udp6:traptarget:162
#FIXME: trapsess -v 3 -u trapuser -l noAuthNoPriv udp:10.11.12.13:162

# snmpNotifyTable  "NMS" "NMS" 1 3 1
# targetAddr NMS .1.3.6.1.6.1.1 0x7f00000100a2 1500 3 "NMS" NMS 3 1
# targetParams NMS 3 3 trapuser 1 3 1

#FIXME Error: snmpd: failed to parse this line....
## trapsess -v 2c -c public tcp:127.0.0.1:162
## trapsess -v 2c -c public tcp6:[::1]:162
trapsess -v 2c -c public udp:127.0.0.1:162
trapsess -v 2c -c public udp6:[::1]:162
# read_config:store: storing: targetAddr NMS .1.3.6.1.6.1.1 0x7f00000100a2 1500 3 "NMS" NMS 3 1
# read_config:store: storing: targetAddr NMSV6 .1.3.6.1.2.1.100.1.2 0x00000000000000000000ffff0000000000a2 1500 3 "NMSV6" NMSV6 3 1

snmpNotifyTable  "NMSV6" "NMSV6" 1 3 1
targetAddr NMSV6 .1.3.6.1.2.1.100.1.6 0x00000000000000000000ffff7f00000100a2 1500 3 "NMSV6" NMSV6 3 1
targetParams NMSV6 3 3 trapuser 1 3 1


#XXX default trapsession config: send v3 traps to localhost with fix engineID
## trapsess -v 3 -e 0x80001f88017f000001 -u trapuser -l noAuthNoPriv udp:127.0.0.1:162
## trapsess -v 3 -e 0x80001f88017f000001 -u trapuser -l noAuthNoPriv udp:127.0.0.1:4660
## trapsess -v 3 -e 0x80001f88017f000001 -u trapuser -l noAuthNoPriv udp6:[::ffff:127.0.0.1]:4660

# tdomain: tdomain_transport_full("snmptrap", "udp:127.0.0.1:4660", 0, "[NIL]", "[NIL]")
# tdomain: Found domain "udp" from specifier "udp"
# tdomain: trying domain "udp" address "127.0.0.1:4660" default address ":162"
# netsnmp_sockaddr_in: addr 0xbfffd83c, inpeername "127.0.0.1:4660", default_target ":162"
# netsnmp_sockaddr_in: addr 0xbfffd83c, inpeername ":162", default_target "[NIL]"
# netsnmp_sockaddr_in: check user service 162
# netsnmp_sockaddr_in: return { AF_INET, 0.0.0.0:162 }
# netsnmp_sockaddr_in: check user service 4660
# netsnmp_sockaddr_in: check destination 127.0.0.1
# netsnmp_sockaddr_in: hostname (resolved okay)
# netsnmp_sockaddr_in: return { AF_INET, 127.0.0.1:4660 }
# netsnmp_udpbase: open remote UDP: [127.0.0.1]:4660->[0.0.0.0]:0
# netsnmp_udpbase: client open UDP: [127.0.0.1]:4660->[0.0.0.0]:0
# trap: adding callback trap sink (0x57a930)
# trapsess: adding to trap table
# tdomain: tdomain_transport_full("snmptrap", "udp6:[::ffff:127.0.0.1]:4660", 0, "[NIL]", "[NIL]")
# tdomain: Found domain "udp6" from specifier "udp6"
# tdomain: trying domain "udp6" address "[::ffff:127.0.0.1]:4660" default address ":162"
# netsnmp_sockaddr_in6: addr 0xbfffd830, peername "[::ffff:127.0.0.1]:4660", default_target ":162"
# netsnmp_sockaddr_in6: addr 0xbfffd830, peername ":162", default_target "[NIL]"
# netsnmp_sockaddr_in6: hostname(?) with port suffix :162
# netsnmp_sockaddr_in6: empty hostname
# netsnmp_sockaddr_in6: IPv6 address with port suffix :4660
# netsnmp_sockaddr_in6: return { AF_INET6, [::ffff:127.0.0.1]:4660 }
# netsnmp_ipv6: fmtaddr: t = 0x0, data = 0xbfffd830, len = 28
# netsnmp_udp6: open remote UDP/IPv6: [::ffff:127.0.0.1]:4660
# trap: adding callback trap sink (0x57aa30)
# trapsess: adding to trap table
# ...
# trap: send_trap 0 0 NET-SNMP-MIB::netSnmpAgentOIDs.255
# tdomain: domain "SNMPv2-TM::snmpUDPDomain"
# netsnmp_udpbase: open remote UDP: [127.0.0.1]:162->[0.0.0.0]:0
# netsnmp_udpbase: client open UDP: [127.0.0.1]:162->[0.0.0.0]:0
# tdomain: domain "SNMPv2-TM::snmpUDPDomain"
# netsnmp_udpbase: open remote UDP: [127.0.0.1]:162->[0.0.0.0]:0
# netsnmp_udpbase: client open UDP: [127.0.0.1]:162->[0.0.0.0]:0
# trap: sending trap type=167, version=3
# netsnmp_udp: send 166 bytes from 0x82435a to UDP: [127.0.0.1]:162->[0.0.0.0]:0 on fd 10
# trap: sending trap type=167, version=3
# netsnmp_udp: send 158 bytes from 0x824162 to UDP: [127.0.0.1]:4660->[0.0.0.0]:0 on fd 6
# trap: sending trap type=167, version=3
# netsnmp_ipv6: fmtaddr: t = 0x0, data = 0x575780, len = 28
# netsnmp_udp6: send 158 bytes from 0x820d62 to UDP/IPv6: [::ffff:127.0.0.1]:4660 on fd 7
# NET-SNMP version 5.8.dev



########################
## usage: ip.addr == 172.23.33.25 && udp.port == 4700
## snmpwalk -r 0 -v 3 -l noAuthNoPriv -u unsec -n snmptrapd localhost:4700 sysuptime
########################
# sudo build/agent/snmpd -f -Le -c ./snmpd.conf -Dread_config,trap,tdomain,netsnmp,target,notif
# sudo agent/snmpd -f -Le -C -c ./snmpd.conf -Dsnmpv3,trap,notif,send,usm
# sudo agent/snmpd -f -Le -C -c ./snmpd.conf '--authuser=read,write unsecureUser noauth' --createUser=unsecureUser --master=agentx --agentXSocket=tcp:localhost:705 -Dagentx,snmp_agent,register,trap,notify localhost:4700
#
# sudo build/agent/snmpd -f -Le -c ./snmpd.conf --master=agentx --agentXSocket=tcp:localhost:705 -Dagentx,snmp_agent,register
#
